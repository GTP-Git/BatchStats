#BatchStats.py
#A - proof of concept setup
#06JUN25




'''
###############################################################
###############################################################


--- Schema Start ---
'sgs_version': (str): "1.0"
'player_names': (list, 2 items):
(str): "AI 1"
(str): "AI 2"
'sgs_initial_bag': (list, 100 items):
(str): "H"
(str): "I"
(str): "R"
    ... (and 97 more items)
'initial_racks_sgs': (list, 2 items):
(list, 7 items):
(str): "O"
(str): "S"
(str): "A"
      ... (and 4 more items)
(list, 7 items):
(str): "S"
(str): "N"
(str): "R"
      ... (and 4 more items)
'full_move_history': (list, 24 items):
    'player': (int): 1
    'move_type': (str): "place"
    'rack': (list, 7 items):
(str): "O"
(str): "S"
(str): "A"
        ... (and 4 more items)
    'score': (int): 8
    'word': (str): "IOTA"
    'positions': (list, 4 items):
(tuple, 3 items):
(int): 7
(int): 6
(str): "I"
(tuple, 3 items):
(int): 7
(int): 7
(str): "O"
(tuple, 3 items):
(int): 7
(int): 8
(str): "T"
        ... (and 1 more items)
    'blanks': (set): set() (empty)
    'drawn': (list, 4 items):
(str): "R"
(str): "E"
(str): "B"
        ... (and 1 more items)
    'coord': (str): "8G"
    'word_with_blanks': (str): "IOTA"
    'is_bingo': (bool): False
    'turn_duration': (float): 0.06920313835144043
    'total_expected_draw_value': (float): 2.476962310537634
    'luck_factor': (float): 1.1599001894623657
    'tiles_played_from_rack': (list, 4 items):
(str): "O"
(str): "I"
(str): "T"
        ... (and 1 more items)
    'leave': (list, 3 items):
(str): "O"
(str): "S"
(str): "A"
    'newly_placed': (list, 4 items):
(tuple, 3 items):
(int): 7
(int): 7
(str): "O"
(tuple, 3 items):
(int): 7
(int): 6
(str): "I"
(tuple, 3 items):
(int): 7
(int): 8
(str): "T"
        ... (and 1 more items)
    'start': (tuple, 2 items):
(int): 7
(int): 6
    'direction': (str): "H"
    'player': (int): 2
    'move_type': (str): "place"
    'rack': (list, 7 items):
(str): "S"
(str): "N"
(str): "R"
        ... (and 4 more items)
    'score': (int): 19
    'word': (str): "DANK"
    'positions': (list, 4 items):
(tuple, 3 items):
(int): 6
(int): 9
(str): "D"
(tuple, 3 items):
(int): 7
(int): 9
(str): "A"
(tuple, 3 items):
(int): 8
(int): 9
(str): "N"
        ... (and 1 more items)
    'blanks': (set): set() (empty)
    'drawn': (list, 3 items):
(str): "E"
(str): "I"
(str): "F"
    'coord': (str): "J7"
    'word_with_blanks': (str): "DANK"
    'is_bingo': (bool): False
    'turn_duration': (float): 0.15205979347229004
    'total_expected_draw_value': (float): 1.7733588276404495
    'luck_factor': (float): -1.2130912576404493
    'tiles_played_from_rack': (list, 3 items):
(str): "N"
(str): "D"
(str): "K"
    'leave': (list, 4 items):
(str): "S"
(str): "R"
(str): "E"
        ... (and 1 more items)
    'newly_placed': (list, 3 items):
(tuple, 3 items):
(int): 8
(int): 9
(str): "N"
(tuple, 3 items):
(int): 6
(int): 9
(str): "D"
(tuple, 3 items):
(int): 9
(int): 9
(str): "K"
    'start': (tuple, 2 items):
(int): 6
(int): 9
    'direction': (str): "V"
    'player': (int): 1
    'move_type': (str): "place"
    'rack': (list, 7 items):
(str): "S"
(str): "A"
(str): "O"
        ... (and 4 more items)
    'score': (int): 13
    'word': (str): "TOO"
    'positions': (list, 3 items):
(tuple, 3 items):
(int): 7
(int): 8
(str): "T"
(tuple, 3 items):
(int): 8
(int): 8
(str): "O"
(tuple, 3 items):
(int): 9
(int): 8
(str): "O"
    'blanks': (set): set() (empty)
    'drawn': (list, 2 items):
(str): "E"
(str): "E"
    'coord': (str): "I8"
    'word_with_blanks': (str): "TOO"
    'is_bingo': (bool): False
    'turn_duration': (float): 0.12834811210632324
    'total_expected_draw_value': (float): 1.3459197586046512
    'luck_factor': (float): -2.108107258604651
    'tiles_played_from_rack': (list, 2 items):
(str): "O"
(str): "O"
    'leave': (list, 5 items):
(str): "S"
(str): "A"
(str): "R"
        ... (and 2 more items)
    'newly_placed': (list, 2 items):
(tuple, 3 items):
(int): 8
(int): 8
(str): "O"
(tuple, 3 items):
(int): 9
(int): 8
(str): "O"
    'start': (tuple, 2 items):
(int): 7
(int): 8
    'direction': (str): "V"
    ... (and 21 more items)
'final_scores_adjusted': (list, 2 items):
(int): 533
(int): 415
'game_mode_info':   'game_mode_str': (str): "AI vs AI"
  'practice_mode_str': (NoneType): None
'game_settings':   'use_endgame_solver': (bool): False
  'use_ai_simulation': (bool): False
  'is_ai_config': (list, 2 items):
(bool): True
(bool): True
  'letter_checks': (list, 4 items):
(bool): True
(bool): True
(bool): True
      ... (and 1 more items)
  'number_checks': (list, 6 items):
(bool): True
(bool): True
(bool): True
      ... (and 3 more items)
  'ai_simulation_parameters':     'num_candidates': (int): 10
    'num_opponent_sims': (int): 50
    'num_post_sim_candidates': (int): 10
  'bbb_7l_max_prob': (int): 1000
  'bbb_8l_max_prob': (int): 1000
--- Schema End ---


###############################################################
###############################################################
'''









import tkinter as tk
from tkinter import filedialog, scrolledtext
import os
import pickle
import csv
import pandas as pd # For statistical analysis


# --- Configuration ---
SGS_FILES_DIRECTORY = "/Users/gregmacbook/Documents/Batch Games"
OUTPUT_CSV_FILE = "batch_stats_summary.csv"
BINGO_MIN_TILES = 7 # Minimum number of tiles played to be considered a bingo

# --- Game Data Keys (based on observed .sgs file structure) ---
# Top-level keys in the unpickled game_data dictionary
SGS_VERSION_KEY = 'sgs_version'
FULL_MOVE_HISTORY_KEY = 'full_move_history' # For bingos and max turn scores
FINAL_SCORES_ADJUSTED_KEY = 'final_scores_adjusted' # For final player scores; List: [p1_score, p2_score]

# Keys for in-progress games (less likely for batch files, but good to keep for reference)
# CURRENT_GAME_STATE_SNAPSHOT_KEY = 'current_game_state_snapshot'
# SNAPSHOT_CURRENT_SCORES_KEY = 'current_scores' # List: [p1_score, p2_score]

MOVE_PLAYER_INDEX_KEY = 'player' # Actual key for player index (e.g., 0 or 1)
MOVE_SCORE_KEY = 'score'         # Actual key for turn score
MOVE_IS_BINGO_FLAG_KEY = 'is_bingo' # Actual key for boolean bingo flag (Preferred)
MOVE_TILES_PLAYED_KEY = 'tiles_played_from_rack' # Actual key for list of tiles played (Fallback for bingo)



def start_schema_dump(status_widget):
    """
    Handles the 'Get Schema' button click. Prompts user for an .sgs file
    and then calls dump_sgs_schema to print its structure to the console.
    """
    status_widget.insert(tk.END, "\nAttempting to dump schema...\n")
    status_widget.see(tk.END)
    
    sgs_filepath = filedialog.askopenfilename(
        title="Select an .SGS File to Analyze Schema",
        initialdir=SGS_FILES_DIRECTORY, # Start in the default batch games directory
        filetypes=(("SGS files", "*.sgs"), ("All files", "*.*"))
    )

    if sgs_filepath: # If a file was selected
        update_status(status_widget, f"Selected file for schema dump: {sgs_filepath}")
        update_status(status_widget, "Schema will be printed to the CONSOLE / TERMINAL.")
        # Call the schema dumper function (which prints to console)
        dump_sgs_schema(sgs_filepath) 
        update_status(status_widget, "Schema dump to console complete.")
    else:
        update_status(status_widget, "Schema dump cancelled (no file selected).")




def dump_sgs_schema(sgs_filepath):
    """
    Loads a single .sGS file and prints its data structure (schema)
    to the console in a human-readable format.

    Args:
        sgs_filepath (str): The full path to the .sgs file to analyze.
    """
    print(f"\n--- Analyzing schema for: {sgs_filepath} ---")
    try:
        with open(sgs_filepath, 'rb') as f_load:
            game_data = pickle.load(f_load)
    except FileNotFoundError:
        print(f"Error: File not found '{sgs_filepath}'")
        return
    except (pickle.UnpicklingError, EOFError) as e:
        print(f"Error unpickling data from {sgs_filepath}: {e}")
        return
    except Exception as e:
        print(f"Unexpected error loading {sgs_filepath}: {e}")
        return

    if not isinstance(game_data, dict):
        print(f"Error: Loaded data from {sgs_filepath} is not a dictionary (Type: {type(game_data)}). Cannot dump schema.")
        return

    print("--- Schema Start ---")
    _recursive_print_schema(game_data, indent_level=0)
    print("--- Schema End ---")




def _recursive_print_schema(data_item, indent_level=0, current_path=""):
    """
    Helper function to recursively print the schema of a data item.
    """
    indent = "  " * indent_level
    MAX_LIST_ITEMS_TO_SHOW = 3 # Show first few items of a list
    MAX_STRING_LENGTH_TO_SHOW = 70 # Truncate long strings

    if isinstance(data_item, dict):
        if not data_item:
            print(f"{indent}{current_path}(dict): {{}} (empty)")
            return
        # print(f"{indent}{current_path}(dict):") # Optional: print dict path before its items
        for key, value in data_item.items():
            new_path = f"{current_path}.{key}" if current_path else key
            print(f"{indent}'{key}': ", end="") # Print key, then let recursive call print type/value
            _recursive_print_schema(value, indent_level + 1, new_path)
    
    elif isinstance(data_item, list):
        if not data_item:
            print(f"(list): [] (empty)")
        else:
            print(f"(list, {len(data_item)} items):")
            # Show type of first item, or first few items
            for i, item in enumerate(data_item[:MAX_LIST_ITEMS_TO_SHOW]):
                item_path_display = f"{current_path}[{i}]" # For context if needed, but can be verbose
                # print(f"{indent}  [{i}]: ", end="") # Print index, then let recursive call print type/value
                _recursive_print_schema(item, indent_level + 1, item_path_display)
            if len(data_item) > MAX_LIST_ITEMS_TO_SHOW:
                print(f"{indent}  ... (and {len(data_item) - MAX_LIST_ITEMS_TO_SHOW} more items)")
    
    elif isinstance(data_item, tuple):
        if not data_item:
            print(f"(tuple): () (empty)")
        else:
            print(f"(tuple, {len(data_item)} items):")
            for i, item in enumerate(data_item[:MAX_LIST_ITEMS_TO_SHOW]):
                item_path_display = f"{current_path}[{i}]"
                _recursive_print_schema(item, indent_level + 1, item_path_display)
            if len(data_item) > MAX_LIST_ITEMS_TO_SHOW:
                print(f"{indent}  ... (and {len(data_item) - MAX_LIST_ITEMS_TO_SHOW} more items)")

    elif isinstance(data_item, set):
        if not data_item:
            print(f"(set): set() (empty)")
        else:
            # Convert set to list for consistent display of first few items
            temp_list = list(data_item)
            print(f"(set, {len(temp_list)} items): {{")
            for i, item in enumerate(temp_list[:MAX_LIST_ITEMS_TO_SHOW]):
                # Sets don't have a path for items, just show the item itself
                _recursive_print_schema(item, indent_level + 1, "") # No path for set items
            if len(temp_list) > MAX_LIST_ITEMS_TO_SHOW:
                print(f"{indent}  ... (and {len(temp_list) - MAX_LIST_ITEMS_TO_SHOW} more items)")
            print(f"{indent}}}")


    elif isinstance(data_item, str):
        if len(data_item) > MAX_STRING_LENGTH_TO_SHOW:
            print(f"(str): \"{data_item[:MAX_STRING_LENGTH_TO_SHOW]}...\" (truncated)")
        else:
            print(f"(str): \"{data_item}\"")
    
    elif isinstance(data_item, bool):
        print(f"(bool): {data_item}")
        
    elif isinstance(data_item, (int, float)):
        print(f"({type(data_item).__name__}): {data_item}")
        
    elif data_item is None:
        print(f"(NoneType): None")
        
    else:
        # For any other types, just print their type and a string representation
        print(f"({type(data_item).__name__}): {str(data_item)}")





def update_status(text_widget, message):
    """Appends a message to the status text widget and scrolls to the end."""
    text_widget.insert(tk.END, message + "\n")
    text_widget.see(tk.END)
    text_widget.update_idletasks() # Ensure GUI updates immediately




def load_sgs_file(filename, status_widget):
    """
    Loads a complete game state from an .sgs file using pickle.
    This is adapted from your provided load_game_sgs function.
    GUI dialogs are removed; status updates go to the status_widget.
    """
    try:
        with open(filename, 'rb') as f_load:
            loaded_data = pickle.load(f_load)
        update_status(status_widget, f"Successfully loaded: {os.path.basename(filename)}")

        if not isinstance(loaded_data, dict): # Basic check
            update_status(status_widget, f"Error: {os.path.basename(filename)} did not load as a dictionary.")
            return None
        # Add more specific checks if your SGS files have a version or mandatory keys
        # For example:
        # if 'sgs_version' not in loaded_data:
        #     update_status(status_widget, f"Error: {os.path.basename(filename)} is missing 'sgs_version'.")
        #     return None
        return loaded_data
    except FileNotFoundError:
        update_status(status_widget, f"Error: File not found '{filename}'")
        return None
    except (pickle.UnpicklingError, EOFError) as e:
        update_status(status_widget, f"Error unpickling data from {os.path.basename(filename)}: {e}")
        return None
    except Exception as e:
        update_status(status_widget, f"Unexpected error loading {os.path.basename(filename)}: {e}")
        return None




def extract_game_data(game_data, filename_for_error_logging):
    """
    Extracts required statistics from a single game's data dictionary
    using the defined keys.
    """
    if not game_data:
        print(f"Error: No game_data provided for {filename_for_error_logging}.")
        return None

    try:
        # --- Final Scores ---
        final_scores = game_data.get(FINAL_SCORES_ADJUSTED_KEY)
        if final_scores is None or not isinstance(final_scores, list) or len(final_scores) < 2:
            print(f"Error: Key '{FINAL_SCORES_ADJUSTED_KEY}' is missing, not a list, or incomplete in {filename_for_error_logging}.")
            return None
        
        p1_final_score = final_scores[0]
        p2_final_score = final_scores[1]

        # --- Move History Analysis (Bingos and Max Turn Score) ---
        p1_bingos = 0
        p2_bingos = 0
        game_overall_max_turn_score = 0
        
        move_history = game_data.get(FULL_MOVE_HISTORY_KEY)
        if move_history is None or not isinstance(move_history, list):
            print(f"Warning: Key '{FULL_MOVE_HISTORY_KEY}' is missing or not a list in {filename_for_error_logging}. Bingos/Max score will be 0.")
        else:
            for move_item in move_history:
                if not isinstance(move_item, dict):
                    print(f"Warning: Item in move_history for {filename_for_error_logging} is not a dictionary. Skipping item.")
                    continue

                # Get turn score
                turn_score = move_item.get(MOVE_SCORE_KEY, 0)
                if not isinstance(turn_score, (int, float)):
                    print(f"Warning: Move score '{turn_score}' is not a number in {filename_for_error_logging}. Defaulting to 0 for this move.")
                    turn_score = 0
                
                if turn_score > game_overall_max_turn_score:
                    game_overall_max_turn_score = turn_score

                # Get player index
                player_idx = move_item.get(MOVE_PLAYER_INDEX_KEY) 

                # Check for bingo
                is_bingo_flag = move_item.get(MOVE_IS_BINGO_FLAG_KEY) 

                if is_bingo_flag is True: # Explicitly check for True
                    if player_idx == 1: # Assuming 1 is P1
                        p1_bingos += 1
                    elif player_idx == 2: # Assuming 2 is P2
                        p2_bingos += 1
                    # else: player_idx might be None or an unexpected value (e.g. 0 if that's used for game events)
                elif is_bingo_flag is None: 
                    # Fallback: If 'is_bingo' key doesn't exist, try counting tiles
                    print(f"Warning: Key '{MOVE_IS_BINGO_FLAG_KEY}' not found in a move for {filename_for_error_logging}. Attempting tile count for bingo.")
                    tiles_played_data = move_item.get(MOVE_TILES_PLAYED_KEY, []) 
                    num_tiles_played = 0
                    if isinstance(tiles_played_data, (list, str)):
                        num_tiles_played = len(tiles_played_data)
                    else:
                        print(f"Warning: Fallback '{MOVE_TILES_PLAYED_KEY}' data in {filename_for_error_logging} for player {player_idx} is '{tiles_played_data}' (Type: {type(tiles_played_data)}), not a list or string.")

                    if num_tiles_played >= BINGO_MIN_TILES:
                        if player_idx == 1: # Assuming 1 is P1
                            p1_bingos += 1
                        elif player_idx == 2: # Assuming 2 is P2
                            p2_bingos += 1
                # If is_bingo_flag is False, do nothing for bingos.

        return {
            "game_id": os.path.basename(filename_for_error_logging),
            "p1_score": p1_final_score,
            "p2_score": p2_final_score,
            "p1_bingos": p1_bingos,
            "p2_bingos": p2_bingos,
            "game_max_turn_score": game_overall_max_turn_score,
        }

    except KeyError as e:
        print(f"KeyError accessing critical data in {filename_for_error_logging}: {e}.")
        return None
    except IndexError as e:
        print(f"IndexError accessing data (e.g., scores list) in {filename_for_error_logging}: {e}.")
        return None
    except TypeError as e:
        print(f"TypeError processing data in {filename_for_error_logging}: {e}.")
        return None
    except Exception as e:
        print(f"An unexpected error occurred while extracting data from {filename_for_error_logging}: {e}")
        return None


def process_all_sgs_files(directory, status_widget):
    """
    Scans a directory for .sgs files, extracts data, and writes to a CSV.
    """
    update_status(status_widget, f"Starting processing of SGS files in: {directory}")
    sgs_files = [f for f in os.listdir(directory) if f.endswith(".sgs")]

    if not sgs_files:
        update_status(status_widget, "No .sgs files found in the directory.")
        return None

    all_games_data = []
    for sgs_file in sgs_files:
        filepath = os.path.join(directory, sgs_file)
        update_status(status_widget, f"Processing: {sgs_file}...")
        game_data_dict = load_sgs_file(filepath, status_widget)

        if game_data_dict:
            extracted_info = extract_game_data(game_data_dict, sgs_file)
            if extracted_info:
                all_games_data.append(extracted_info)
            else:
                update_status(status_widget, f"Could not extract data from {sgs_file}. Skipping.")
        else:
            update_status(status_widget, f"Failed to load {sgs_file}. Skipping.")

    if not all_games_data:
        update_status(status_widget, "No data successfully extracted from any SGS files.")
        return False

    # Write to CSV
    try:
        with open(OUTPUT_CSV_FILE, 'w', newline='') as csvfile:
            if not all_games_data: # Should be caught above, but defensive
                update_status(status_widget, "No data to write to CSV.")
                return False
            
            fieldnames = all_games_data[0].keys() # Assumes all dicts have same keys
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(all_games_data)
        update_status(status_widget, f"Successfully wrote data for {len(all_games_data)} games to {OUTPUT_CSV_FILE}")
        return True # Indicates CSV was written
    except IOError as e:
        update_status(status_widget, f"Error writing to CSV {OUTPUT_CSV_FILE}: {e}")
        return False
    except Exception as e:
        update_status(status_widget, f"Unexpected error writing CSV: {e}")
        return False


def calculate_and_display_stats(status_widget):
    """
    Reads the generated CSV using Pandas and calculates/displays statistics.
    """
    try:
        df = pd.read_csv(OUTPUT_CSV_FILE)
    except FileNotFoundError:
        update_status(status_widget, f"Error: CSV file {OUTPUT_CSV_FILE} not found. Cannot calculate stats.")
        return
    except pd.errors.EmptyDataError:
        update_status(status_widget, f"Error: CSV file {OUTPUT_CSV_FILE} is empty. Cannot calculate stats.")
        return
    except Exception as e:
        update_status(status_widget, f"Error reading CSV with Pandas {OUTPUT_CSV_FILE}: {e}")
        return

    if df.empty:
        update_status(status_widget, "CSV file is empty. No statistics to calculate.")
        return

    num_games = len(df)
    update_status(status_widget, f"\n--- Statistics based on {num_games} games ---")

    # Cumulative average scores
    avg_p1_score = df['p1_score'].mean()
    avg_p2_score = df['p2_score'].mean()
    update_status(status_widget, f"Average P1 Score: {avg_p1_score:.2f}")
    update_status(status_widget, f"Average P2 Score: {avg_p2_score:.2f}")

    # Average bingos per game
    avg_p1_bingos = df['p1_bingos'].mean()
    avg_p2_bingos = df['p2_bingos'].mean()
    update_status(status_widget, f"Average P1 Bingos per Game: {avg_p1_bingos:.2f}")
    update_status(status_widget, f"Average P2 Bingos per Game: {avg_p2_bingos:.2f}")

    # Average of the "largest single score per game"
    avg_max_turn_score = df['game_max_turn_score'].mean()
    update_status(status_widget, f"Average Max Turn Score per Game: {avg_max_turn_score:.2f}")

    update_status(status_widget, "\n--- End of Statistics ---")


def start_processing(status_widget):
    """Main function called when the 'Gather Stats' button is pressed."""
    status_widget.delete('1.0', tk.END) # Clear previous status messages
    update_status(status_widget, "Process started...")

    # Check if directory exists
    if not os.path.isdir(SGS_FILES_DIRECTORY):
        update_status(status_widget, f"Error: Directory not found - {SGS_FILES_DIRECTORY}")
        update_status(status_widget, "Processing aborted.")
        return

    csv_written_successfully = process_all_sgs_files(SGS_FILES_DIRECTORY, status_widget)

    if csv_written_successfully:
        calculate_and_display_stats(status_widget)
    else:
        update_status(status_widget, "CSV file was not generated or is empty. Cannot calculate statistics.")

    update_status(status_widget, "\nProcessing finished.")


def setup_gui():
    """Sets up and runs the Tkinter GUI."""
    root = tk.Tk()
    root.title("Scrabble Batch Stats Processor")

    main_frame = tk.Frame(root, padx=10, pady=10)
    main_frame.pack(fill=tk.BOTH, expand=True)

    # Directory Info Label
    dir_label = tk.Label(main_frame, text=f"Looking for .sgs files in: {SGS_FILES_DIRECTORY}")
    dir_label.pack(pady=(0, 10))
    
    output_csv_label = tk.Label(main_frame, text=f"Output CSV will be: {OUTPUT_CSV_FILE}")
    output_csv_label.pack(pady=(0,10))

    # Status Text Area
    status_text = scrolledtext.ScrolledText(main_frame, wrap=tk.WORD, height=20, width=80)
    status_text.pack(pady=(0, 10), fill=tk.BOTH, expand=True)

    # Gather Stats Button
    gather_button = tk.Button(main_frame, text="Gather Stats",
                              command=lambda: start_processing(status_text))
    gather_button.pack(pady=(5,0))

    # Get Schema Button
    schema_button = tk.Button(main_frame, text="Get Schema from File",
                              command=lambda: start_schema_dump(status_text))
    schema_button.pack(pady=(5,0)) # Add some padding
    
    update_status(status_text, "Welcome to the Scrabble Batch Stats Processor.")
    update_status(status_text, "Click 'Gather Stats' to process batch files.")
    update_status(status_text, "Click 'Get Schema from File' to analyze an .sgs file structure (output to console).")

    root.mainloop()





if __name__ == "__main__":
    # It's good practice to ensure the output directory for the CSV exists
    # For now, OUTPUT_CSV_FILE is in the same directory as the script.
    # If it were elsewhere, you might add:
    # output_dir = os.path.dirname(OUTPUT_CSV_FILE)
    # if output_dir and not os.path.exists(output_dir):
    #     os.makedirs(output_dir) # Create if not exists
        
    setup_gui()
